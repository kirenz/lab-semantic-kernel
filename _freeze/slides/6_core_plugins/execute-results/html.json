{
  "hash": "738ccbf98003a5ceeb0b8631a12dc858",
  "result": {
    "markdown": "---\ntitle: Core Plugins\ntitle-slide-attributes:\n  data-background-image: ../images/logo.png\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nlang: en\nsubtitle: in Semantic Kernel\nauthor: Jan Kirenz\nexecute:\n  eval: false\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: true\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   # logo: ../images/logo.png\n    footer: Jan Kirenz\n---\n\n# Core Plugins\n\n![](../images/plugins.png)\n\n- We want to have a vat of plugins ... and then find the right plugin to fit the goal ...\n\n- You can find more about the predefined plugins used below [here](https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/out-of-the-box-plugins?tabs=Csharp).\n\n\n# Setup\n\n## Python\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport semantic_kernel as sk\nfrom semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion, OpenAITextEmbedding\nfrom semantic_kernel.connectors.ai.open_ai import AzureChatCompletion, AzureTextEmbedding\nfrom semantic_kernel.planning import ActionPlanner\nfrom semantic_kernel.planning import SequentialPlanner\nfrom semantic_kernel.core_skills.text_skill import TextSkill\nfrom semantic_kernel.planning import SequentialPlanner\nfrom semantic_kernel.core_skills.text_skill import TextSkill\nfrom semantic_kernel.core_skills import FileIOSkill, MathSkill, TextSkill, TimeSkill\n\nfrom IPython.display import display, Markdown\n```\n:::\n\n\n## Kernel\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nkernel = sk.Kernel()\n\napi_key, org_id = sk.openai_settings_from_dot_env()\n\nkernel.add_text_completion_service(\n    \"openaicompletion\", OpenAIChatCompletion(\"gpt-3.5-turbo-0301\", api_key, org_id))\n\nkernel.add_text_embedding_generation_service(\n    \"openaiembedding\", OpenAITextEmbedding(\"text-embedding-ada-002\", api_key, org_id))\n```\n:::\n\n\n# Add Core Plugins\n\n\n![](/images/core_plugins.png)\n\n## Import plugins\n\n\n- Action Planner is a simple tool which can find the right tool to get things done\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nplanner = ActionPlanner(kernel)\n```\n:::\n\n\n- Adding the tools for the kernel to do math, to read/write files, to tell the time, and to play with text:\n\n. . .\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nkernel.import_skill(MathSkill(), \"math\")\nkernel.import_skill(FileIOSkill(), \"fileIO\")\nkernel.import_skill(TimeSkill(), \"time\")\nkernel.import_skill(TextSkill(), \"text\")\n```\n:::\n\n\n# Example Plugins\n\n## Math\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nask = \"What is the sum of 110 and 990?\"\n```\n:::\n\n\n. . .\n\n- Finding the most similar function available to get that done...\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nplan = await planner.create_plan_async(goal=ask)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nprint(\n    f\" The best single function to use is `{plan._skill_name}.{plan._function.name}`\")\n```\n:::\n\n\n## Date {.smaller}\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nask = \"What is today?\"\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nprint(f\" Finding the most similar function available to get that done...\")\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nplan = await planner.create_plan_async(goal=ask)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nprint(\n    f\" The best single function to use is `{plan._skill_name}.{plan._function.name}`\")\n```\n:::\n\n\n## Text\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nask = \"How do I write the word 'text' to a file?\"\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nprint(f\" Finding the most similar function available to get that done...\")\nplan = await planner.create_plan_async(goal=ask)\nprint(\n    f\" The best single function to use is `{plan._skill_name}.{plan._function.name}`\")\n```\n:::\n\n\n# Text example Poem\n\n## Custom Plugin LiterateFriend\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nplugins_directory = \"../plugins-sk\"\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nwriter_plugin = kernel.import_semantic_skill_from_directory(\n    plugins_directory, \"LiterateFriend\")\n```\n:::\n\n\n## Use Sequential Planner\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nplanner = SequentialPlanner(kernel)\n```\n:::\n\n\n## Task\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nask = \"\"\"\nTomorrow is Valentine's day. I need to come up with a poem. Translate the poem to German.\n\"\"\"\n```\n:::\n\n\n- This will require two plugins (write poem and translate)\n\n## Call planner\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nplan = await planner.create_plan_async(goal=ask)\n```\n:::\n\n\n## Obtain result\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nresult = await plan.invoke_async()\n```\n:::\n\n\n## Output\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nfor index, step in enumerate(plan._steps):\n    print(f\"‚úÖ Step {index+1} used function `{step._function.name}`\")\n\ntrace_resultp = True\n\ndisplay(\n    Markdown(f\"## ‚ú® Generated result from the ask: {ask}\\n\\n---\\n\" + str(result)))\n```\n:::\n\n\n## Display output\n\n```markdown\n‚úÖ Step 1 used function `ShortPoem`\n‚úÖ Step 2 used function `Translate`\n‚ú® Generated result from the ask:\n\nTomorrow is Valentine's day. I need to come up with a poem. Translate the poem to German.\n\nRosen sind rot, Veilchen sind blau, Valentinstag ist da, was wirst du tun? Kaufe Schokolade und Blumen oder schreibe einen Liebesbrief, Vergiss nur nicht, es alles besser zu machen.\n\nWenn du Single bist, keine Sorge, G√∂nn dir selbst, zu...\n```\n\n- mmmhhh, maybe lost in translation üôÇ\n\n\n## Take a closer look at the output\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nfor index, step in enumerate(plan._steps):\n    print(f\"‚úÖ Step {index+1} used function `{step._function.name}`\")\n\ntrace_resultp = True\n\nif trace_resultp:\n    print(\"Longform trace:\\n\")\n    for index, step in enumerate(plan._steps):\n        print(\"Step:\", index)\n        print(\"Description:\", step.description)\n        print(\"Function:\", step.skill_name + \".\" + step._function.name)\n        print(\"Output vars:\", step._outputs)\n        if len(step._outputs) > 0:\n            print(\"  Output:\\n\", str.replace(\n                result[step._outputs[0]], \"\\n\", \"\\n  \"))\n\ndisplay(\n    Markdown(f\"## ‚ú® Generated result from the ask: {ask}\\n\\n---\\n\" + str(result)))\n```\n:::\n\n\n## Take a closer look at the output {.smaller}\n\n```markdown\n\n‚úÖ Step 1 used function `ShortPoem`\n‚úÖ Step 2 used function `Translate`\nLongform trace:\n\nStep: 0\nDescription: Turn a scenario into a short and entertaining poem.\nFunction: LiterateFriend.ShortPoem\nOutput vars: ['POEM']\n  Output:\n Roses are red, violets are blue,\n  Valentine's Day is here, what will you do?\n  Buy chocolates and flowers, or write a love letter,\n  Just don't forget, to make it all better.\n  \n  If you're single, don't you fret,\n  Treat yourself, to\n\nStep: 1\nDescription: Translate the input into a language of your choice\nFunction: LiterateFriend.Translate\nOutput vars: ['RESULT__TRANSLATED_POEM']\n  Output:\n Rosen sind rot, Veilchen sind blau,\n  Valentinstag ist da, was wirst du tun?\n  Kaufe Schokolade und Blumen oder schreibe einen Liebesbrief,\n  Vergiss nur nicht, es alles besser zu machen.\n  \n  Wenn du Single bist, keine Sorge,\n  G√∂nn dir selbst, zu...\n\n```\n\n\n# Acknowledgments\n\n*This tutorial is mainly based on the excellent course [\"How Business Thinkers Can Start Building AI Plugins With Semantic Kernel\"](https://www.deeplearning.ai/short-courses/microsoft-semantic-kernel/) provided by John Maeda and Andrew Ng*\n\n# What's next? {background-image=\"../images/logo.png\" background-opacity=\"0.5\"}\n\n- **Congratulations! You have completed this tutorial** üëç\n\n**Next, you may want to go back to the [lab's website](https://kirenz.github.io/semantic-kernel/)**\n\n",
    "supporting": [
      "6_core_plugins_files"
    ],
    "filters": [],
    "includes": {}
  }
}